// <auto-generated />
using System;
using System.Collections.Generic;
using Kyoo.Abstractions.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace Kyoo.Postgresql.Migrations
{
	[DbContext(typeof(PostgresContext))]
	[Migration("20230731065523_RemoveTracks")]
	partial class RemoveTracks
	{
		/// <inheritdoc />
		protected override void BuildTargetModel(ModelBuilder modelBuilder)
		{
#pragma warning disable 612, 618
			modelBuilder
				.HasAnnotation("ProductVersion", "7.0.9")
				.HasAnnotation("Relational:MaxIdentifierLength", 63);

			NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "item_type", new[] { "show", "movie", "collection" });
			NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "status", new[] { "unknown", "finished", "airing", "planned" });
			NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

			modelBuilder.Entity("Kyoo.Abstractions.Models.Collection", b =>
				{
				b.Property<int>("ID")
				.ValueGeneratedOnAdd()
				.HasColumnType("integer")
				.HasColumnName("id");

				NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

				b.Property<Dictionary<int, string>>("Images")
				.HasColumnType("jsonb")
				.HasColumnName("images");

				b.Property<string>("Name")
				.HasColumnType("text")
				.HasColumnName("name");

				b.Property<string>("Overview")
				.HasColumnType("text")
				.HasColumnName("overview");

				b.Property<string>("Slug")
					.IsRequired()
					.HasColumnType("text")
					.HasColumnName("slug");

				b.HasKey("ID")
					.HasName("pk_collections");

				b.HasIndex("Slug")
					.IsUnique()
					.HasDatabaseName("ix_collections_slug");

				b.ToTable("collections", (string)null);
				});

			modelBuilder.Entity("Kyoo.Abstractions.Models.Episode", b =>
				{
				b.Property<int>("ID")
				.ValueGeneratedOnAdd()
				.HasColumnType("integer")
				.HasColumnName("id");

				NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

				b.Property<int?>("AbsoluteNumber")
				.HasColumnType("integer")
				.HasColumnName("absolute_number");

				b.Property<int?>("EpisodeNumber")
				.HasColumnType("integer")
				.HasColumnName("episode_number");

				b.Property<Dictionary<int, string>>("Images")
				.HasColumnType("jsonb")
				.HasColumnName("images");

				b.Property<string>("Overview")
					.HasColumnType("text")
					.HasColumnName("overview");

				b.Property<string>("Path")
					.HasColumnType("text")
					.HasColumnName("path");

				b.Property<DateTime?>("ReleaseDate")
					.HasColumnType("timestamp with time zone")
					.HasColumnName("release_date");

				b.Property<int?>("SeasonID")
					.HasColumnType("integer")
					.HasColumnName("season_id");

				b.Property<int?>("SeasonNumber")
					.HasColumnType("integer")
					.HasColumnName("season_number");

				b.Property<int>("ShowID")
					.HasColumnType("integer")
					.HasColumnName("show_id");

				b.Property<string>("Slug")
					.IsRequired()
					.HasColumnType("text")
					.HasColumnName("slug");

				b.Property<string>("Title")
					.HasColumnType("text")
					.HasColumnName("title");

				b.HasKey("ID")
					.HasName("pk_episodes");

				b.HasIndex("SeasonID")
					.HasDatabaseName("ix_episodes_season_id");

				b.HasIndex("Slug")
					.IsUnique()
					.HasDatabaseName("ix_episodes_slug");

				b.HasIndex("ShowID", "SeasonNumber", "EpisodeNumber", "AbsoluteNumber")
					.IsUnique()
					.HasDatabaseName("ix_episodes_show_id_season_number_episode_number_absolute_numb");

				b.ToTable("episodes", (string)null);
				});

			modelBuilder.Entity("Kyoo.Abstractions.Models.Genre", b =>
				{
				b.Property<int>("ID")
				.ValueGeneratedOnAdd()
				.HasColumnType("integer")
				.HasColumnName("id");

				NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

				b.Property<string>("Name")
				.HasColumnType("text")
				.HasColumnName("name");

				b.Property<string>("Slug")
				.IsRequired()
				.HasColumnType("text")
				.HasColumnName("slug");

				b.HasKey("ID")
				.HasName("pk_genres");

				b.HasIndex("Slug")
					.IsUnique()
					.HasDatabaseName("ix_genres_slug");

				b.ToTable("genres", (string)null);
				});

			modelBuilder.Entity("Kyoo.Abstractions.Models.Library", b =>
				{
				b.Property<int>("ID")
				.ValueGeneratedOnAdd()
				.HasColumnType("integer")
				.HasColumnName("id");

				NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

				b.Property<string>("Name")
				.HasColumnType("text")
				.HasColumnName("name");

				b.Property<string[]>("Paths")
				.HasColumnType("text[]")
				.HasColumnName("paths");

				b.Property<string>("Slug")
				.IsRequired()
				.HasColumnType("text")
				.HasColumnName("slug");

				b.HasKey("ID")
					.HasName("pk_libraries");

				b.HasIndex("Slug")
					.IsUnique()
					.HasDatabaseName("ix_libraries_slug");

				b.ToTable("libraries", (string)null);
				});

			modelBuilder.Entity("Kyoo.Abstractions.Models.LibraryItem", b =>
				{
				b.Property<int>("ID")
				.HasColumnType("integer")
				.HasColumnName("id");

				b.Property<DateTime?>("EndAir")
				.HasColumnType("timestamp with time zone")
				.HasColumnName("end_air");

				b.Property<Dictionary<int, string>>("Images")
				.HasColumnType("jsonb")
				.HasColumnName("images");

				b.Property<string>("Overview")
				.HasColumnType("text")
				.HasColumnName("overview");

				b.Property<string>("Slug")
				.HasColumnType("text")
				.HasColumnName("slug");

				b.Property<DateTime?>("StartAir")
					.HasColumnType("timestamp with time zone")
					.HasColumnName("start_air");

				b.Property<Status?>("Status")
					.HasColumnType("status")
					.HasColumnName("status");

				b.Property<string>("Title")
					.HasColumnType("text")
					.HasColumnName("title");

				b.Property<ItemType>("Type")
					.HasColumnType("item_type")
					.HasColumnName("type");

				b.HasKey("ID")
					.HasName("pk_library_items");

				b.ToTable((string)null);

				b.ToView("library_items", (string)null);
				});

			modelBuilder.Entity("Kyoo.Abstractions.Models.People", b =>
				{
				b.Property<int>("ID")
				.ValueGeneratedOnAdd()
				.HasColumnType("integer")
				.HasColumnName("id");

				NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

				b.Property<Dictionary<int, string>>("Images")
				.HasColumnType("jsonb")
				.HasColumnName("images");

				b.Property<string>("Name")
				.HasColumnType("text")
				.HasColumnName("name");

				b.Property<string>("Slug")
				.IsRequired()
				.HasColumnType("text")
				.HasColumnName("slug");

				b.HasKey("ID")
					.HasName("pk_people");

				b.HasIndex("Slug")
					.IsUnique()
					.HasDatabaseName("ix_people_slug");

				b.ToTable("people", (string)null);
				});

			modelBuilder.Entity("Kyoo.Abstractions.Models.PeopleRole", b =>
				{
				b.Property<int>("ID")
				.ValueGeneratedOnAdd()
				.HasColumnType("integer")
				.HasColumnName("id");

				NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

				b.Property<int>("PeopleID")
				.HasColumnType("integer")
				.HasColumnName("people_id");

				b.Property<string>("Role")
				.HasColumnType("text")
				.HasColumnName("role");

				b.Property<int>("ShowID")
				.HasColumnType("integer")
				.HasColumnName("show_id");

				b.Property<string>("Type")
					.HasColumnType("text")
					.HasColumnName("type");

				b.HasKey("ID")
					.HasName("pk_people_roles");

				b.HasIndex("PeopleID")
					.HasDatabaseName("ix_people_roles_people_id");

				b.HasIndex("ShowID")
					.HasDatabaseName("ix_people_roles_show_id");

				b.ToTable("people_roles", (string)null);
				});

			modelBuilder.Entity("Kyoo.Abstractions.Models.Provider", b =>
				{
				b.Property<int>("ID")
				.ValueGeneratedOnAdd()
				.HasColumnType("integer")
				.HasColumnName("id");

				NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

				b.Property<Dictionary<int, string>>("Images")
				.HasColumnType("jsonb")
				.HasColumnName("images");

				b.Property<string>("Name")
				.HasColumnType("text")
				.HasColumnName("name");

				b.Property<string>("Slug")
				.IsRequired()
				.HasColumnType("text")
				.HasColumnName("slug");

				b.HasKey("ID")
					.HasName("pk_providers");

				b.HasIndex("Slug")
					.IsUnique()
					.HasDatabaseName("ix_providers_slug");

				b.ToTable("providers", (string)null);
				});

			modelBuilder.Entity("Kyoo.Abstractions.Models.Season", b =>
				{
				b.Property<int>("ID")
				.ValueGeneratedOnAdd()
				.HasColumnType("integer")
				.HasColumnName("id");

				NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

				b.Property<DateTime?>("EndDate")
				.HasColumnType("timestamp with time zone")
				.HasColumnName("end_date");

				b.Property<Dictionary<int, string>>("Images")
				.HasColumnType("jsonb")
				.HasColumnName("images");

				b.Property<string>("Overview")
				.HasColumnType("text")
				.HasColumnName("overview");

				b.Property<int>("SeasonNumber")
					.HasColumnType("integer")
					.HasColumnName("season_number");

				b.Property<int>("ShowID")
					.HasColumnType("integer")
					.HasColumnName("show_id");

				b.Property<string>("Slug")
					.IsRequired()
					.HasColumnType("text")
					.HasColumnName("slug");

				b.Property<DateTime?>("StartDate")
					.HasColumnType("timestamp with time zone")
					.HasColumnName("start_date");

				b.Property<string>("Title")
					.HasColumnType("text")
					.HasColumnName("title");

				b.HasKey("ID")
					.HasName("pk_seasons");

				b.HasIndex("Slug")
					.IsUnique()
					.HasDatabaseName("ix_seasons_slug");

				b.HasIndex("ShowID", "SeasonNumber")
					.IsUnique()
					.HasDatabaseName("ix_seasons_show_id_season_number");

				b.ToTable("seasons", (string)null);
				});

			modelBuilder.Entity("Kyoo.Abstractions.Models.Show", b =>
				{
				b.Property<int>("ID")
				.ValueGeneratedOnAdd()
				.HasColumnType("integer")
				.HasColumnName("id");

				NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

				b.Property<string[]>("Aliases")
				.HasColumnType("text[]")
				.HasColumnName("aliases");

				b.Property<DateTime?>("EndAir")
				.HasColumnType("timestamp with time zone")
				.HasColumnName("end_air");

				b.Property<Dictionary<int, string>>("Images")
				.HasColumnType("jsonb")
				.HasColumnName("images");

				b.Property<bool>("IsMovie")
					.HasColumnType("boolean")
					.HasColumnName("is_movie");

				b.Property<string>("Overview")
					.HasColumnType("text")
					.HasColumnName("overview");

				b.Property<string>("Path")
					.HasColumnType("text")
					.HasColumnName("path");

				b.Property<string>("Slug")
					.IsRequired()
					.HasColumnType("text")
					.HasColumnName("slug");

				b.Property<DateTime?>("StartAir")
					.HasColumnType("timestamp with time zone")
					.HasColumnName("start_air");

				b.Property<Status>("Status")
					.HasColumnType("status")
					.HasColumnName("status");

				b.Property<int?>("StudioID")
					.HasColumnType("integer")
					.HasColumnName("studio_id");

				b.Property<string>("Title")
					.HasColumnType("text")
					.HasColumnName("title");

				b.HasKey("ID")
					.HasName("pk_shows");

				b.HasIndex("Slug")
					.IsUnique()
					.HasDatabaseName("ix_shows_slug");

				b.HasIndex("StudioID")
					.HasDatabaseName("ix_shows_studio_id");

				b.ToTable("shows", (string)null);
				});

			modelBuilder.Entity("Kyoo.Abstractions.Models.Studio", b =>
				{
				b.Property<int>("ID")
				.ValueGeneratedOnAdd()
				.HasColumnType("integer")
				.HasColumnName("id");

				NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

				b.Property<string>("Name")
				.HasColumnType("text")
				.HasColumnName("name");

				b.Property<string>("Slug")
				.IsRequired()
				.HasColumnType("text")
				.HasColumnName("slug");

				b.HasKey("ID")
				.HasName("pk_studios");

				b.HasIndex("Slug")
					.IsUnique()
					.HasDatabaseName("ix_studios_slug");

				b.ToTable("studios", (string)null);
				});

			modelBuilder.Entity("Kyoo.Abstractions.Models.User", b =>
				{
				b.Property<int>("ID")
				.ValueGeneratedOnAdd()
				.HasColumnType("integer")
				.HasColumnName("id");

				NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

				b.Property<string>("Email")
				.HasColumnType("text")
				.HasColumnName("email");

				b.Property<Dictionary<string, string>>("ExtraData")
				.HasColumnType("jsonb")
				.HasColumnName("extra_data");

				b.Property<Dictionary<int, string>>("Images")
				.HasColumnType("jsonb")
				.HasColumnName("images");

				b.Property<string>("Password")
					.HasColumnType("text")
					.HasColumnName("password");

				b.Property<string[]>("Permissions")
					.HasColumnType("text[]")
					.HasColumnName("permissions");

				b.Property<string>("Slug")
					.IsRequired()
					.HasColumnType("text")
					.HasColumnName("slug");

				b.Property<string>("Username")
					.HasColumnType("text")
					.HasColumnName("username");

				b.HasKey("ID")
					.HasName("pk_users");

				b.HasIndex("Slug")
					.IsUnique()
					.HasDatabaseName("ix_users_slug");

				b.ToTable("users", (string)null);
				});

			modelBuilder.Entity("Kyoo.Abstractions.Models.WatchedEpisode", b =>
				{
				b.Property<int>("UserID")
				.HasColumnType("integer")
				.HasColumnName("user_id");

				b.Property<int>("EpisodeID")
				.HasColumnType("integer")
				.HasColumnName("episode_id");

				b.Property<int>("WatchedPercentage")
				.HasColumnType("integer")
				.HasColumnName("watched_percentage");

				b.HasKey("UserID", "EpisodeID")
				.HasName("pk_watched_episodes");

				b.HasIndex("EpisodeID")
				.HasDatabaseName("ix_watched_episodes_episode_id");

				b.ToTable("watched_episodes", (string)null);
				});

			modelBuilder.Entity("ShowUser", b =>
				{
				b.Property<int>("UsersID")
				.HasColumnType("integer")
				.HasColumnName("users_id");

				b.Property<int>("WatchedID")
				.HasColumnType("integer")
				.HasColumnName("watched_id");

				b.HasKey("UsersID", "WatchedID")
				.HasName("pk_link_user_show");

				b.HasIndex("WatchedID")
				.HasDatabaseName("ix_link_user_show_watched_id");

				b.ToTable("link_user_show", (string)null);
				});

			modelBuilder.Entity("collection_metadata_id", b =>
				{
				b.Property<int>("ResourceID")
				.HasColumnType("integer")
				.HasColumnName("resource_id");

				b.Property<int>("ProviderID")
				.HasColumnType("integer")
				.HasColumnName("provider_id");

				b.Property<string>("DataID")
				.HasColumnType("text")
				.HasColumnName("data_id");

				b.Property<string>("Link")
				.HasColumnType("text")
				.HasColumnName("link");

				b.HasKey("ResourceID", "ProviderID")
				.HasName("pk_collection_metadata_id");

				b.HasIndex("ProviderID")
					.HasDatabaseName("ix_collection_metadata_id_provider_id");

				b.ToTable("collection_metadata_id", (string)null);
				});

			modelBuilder.Entity("episode_metadata_id", b =>
				{
				b.Property<int>("ResourceID")
				.HasColumnType("integer")
				.HasColumnName("resource_id");

				b.Property<int>("ProviderID")
				.HasColumnType("integer")
				.HasColumnName("provider_id");

				b.Property<string>("DataID")
				.HasColumnType("text")
				.HasColumnName("data_id");

				b.Property<string>("Link")
				.HasColumnType("text")
				.HasColumnName("link");

				b.HasKey("ResourceID", "ProviderID")
				.HasName("pk_episode_metadata_id");

				b.HasIndex("ProviderID")
					.HasDatabaseName("ix_episode_metadata_id_provider_id");

				b.ToTable("episode_metadata_id", (string)null);
				});

			modelBuilder.Entity("link_collection_show", b =>
				{
				b.Property<int>("collection_id")
				.HasColumnType("integer")
				.HasColumnName("collection_id");

				b.Property<int>("show_id")
				.HasColumnType("integer")
				.HasColumnName("show_id");

				b.HasKey("collection_id", "show_id")
				.HasName("pk_link_collection_show");

				b.HasIndex("show_id")
				.HasDatabaseName("ix_link_collection_show_show_id");

				b.ToTable("link_collection_show", (string)null);
				});

			modelBuilder.Entity("link_library_collection", b =>
				{
				b.Property<int>("collection_id")
				.HasColumnType("integer")
				.HasColumnName("collection_id");

				b.Property<int>("library_id")
				.HasColumnType("integer")
				.HasColumnName("library_id");

				b.HasKey("collection_id", "library_id")
				.HasName("pk_link_library_collection");

				b.HasIndex("library_id")
				.HasDatabaseName("ix_link_library_collection_library_id");

				b.ToTable("link_library_collection", (string)null);
				});

			modelBuilder.Entity("link_library_provider", b =>
				{
				b.Property<int>("library_id")
				.HasColumnType("integer")
				.HasColumnName("library_id");

				b.Property<int>("provider_id")
				.HasColumnType("integer")
				.HasColumnName("provider_id");

				b.HasKey("library_id", "provider_id")
				.HasName("pk_link_library_provider");

				b.HasIndex("provider_id")
				.HasDatabaseName("ix_link_library_provider_provider_id");

				b.ToTable("link_library_provider", (string)null);
				});

			modelBuilder.Entity("link_library_show", b =>
				{
				b.Property<int>("library_id")
				.HasColumnType("integer")
				.HasColumnName("library_id");

				b.Property<int>("show_id")
				.HasColumnType("integer")
				.HasColumnName("show_id");

				b.HasKey("library_id", "show_id")
				.HasName("pk_link_library_show");

				b.HasIndex("show_id")
				.HasDatabaseName("ix_link_library_show_show_id");

				b.ToTable("link_library_show", (string)null);
				});

			modelBuilder.Entity("link_show_genre", b =>
				{
				b.Property<int>("genre_id")
				.HasColumnType("integer")
				.HasColumnName("genre_id");

				b.Property<int>("show_id")
				.HasColumnType("integer")
				.HasColumnName("show_id");

				b.HasKey("genre_id", "show_id")
				.HasName("pk_link_show_genre");

				b.HasIndex("show_id")
				.HasDatabaseName("ix_link_show_genre_show_id");

				b.ToTable("link_show_genre", (string)null);
				});

			modelBuilder.Entity("people_metadata_id", b =>
				{
				b.Property<int>("ResourceID")
				.HasColumnType("integer")
				.HasColumnName("resource_id");

				b.Property<int>("ProviderID")
				.HasColumnType("integer")
				.HasColumnName("provider_id");

				b.Property<string>("DataID")
				.HasColumnType("text")
				.HasColumnName("data_id");

				b.Property<string>("Link")
				.HasColumnType("text")
				.HasColumnName("link");

				b.HasKey("ResourceID", "ProviderID")
				.HasName("pk_people_metadata_id");

				b.HasIndex("ProviderID")
					.HasDatabaseName("ix_people_metadata_id_provider_id");

				b.ToTable("people_metadata_id", (string)null);
				});

			modelBuilder.Entity("season_metadata_id", b =>
				{
				b.Property<int>("ResourceID")
				.HasColumnType("integer")
				.HasColumnName("resource_id");

				b.Property<int>("ProviderID")
				.HasColumnType("integer")
				.HasColumnName("provider_id");

				b.Property<string>("DataID")
				.HasColumnType("text")
				.HasColumnName("data_id");

				b.Property<string>("Link")
				.HasColumnType("text")
				.HasColumnName("link");

				b.HasKey("ResourceID", "ProviderID")
				.HasName("pk_season_metadata_id");

				b.HasIndex("ProviderID")
					.HasDatabaseName("ix_season_metadata_id_provider_id");

				b.ToTable("season_metadata_id", (string)null);
				});

			modelBuilder.Entity("show_metadata_id", b =>
				{
				b.Property<int>("ResourceID")
				.HasColumnType("integer")
				.HasColumnName("resource_id");

				b.Property<int>("ProviderID")
				.HasColumnType("integer")
				.HasColumnName("provider_id");

				b.Property<string>("DataID")
				.HasColumnType("text")
				.HasColumnName("data_id");

				b.Property<string>("Link")
				.HasColumnType("text")
				.HasColumnName("link");

				b.HasKey("ResourceID", "ProviderID")
				.HasName("pk_show_metadata_id");

				b.HasIndex("ProviderID")
					.HasDatabaseName("ix_show_metadata_id_provider_id");

				b.ToTable("show_metadata_id", (string)null);
				});

			modelBuilder.Entity("studio_metadata_id", b =>
				{
				b.Property<int>("ResourceID")
				.HasColumnType("integer")
				.HasColumnName("resource_id");

				b.Property<int>("ProviderID")
				.HasColumnType("integer")
				.HasColumnName("provider_id");

				b.Property<string>("DataID")
				.HasColumnType("text")
				.HasColumnName("data_id");

				b.Property<string>("Link")
				.HasColumnType("text")
				.HasColumnName("link");

				b.HasKey("ResourceID", "ProviderID")
				.HasName("pk_studio_metadata_id");

				b.HasIndex("ProviderID")
					.HasDatabaseName("ix_studio_metadata_id_provider_id");

				b.ToTable("studio_metadata_id", (string)null);
				});

			modelBuilder.Entity("Kyoo.Abstractions.Models.Episode", b =>
				{
				b.HasOne("Kyoo.Abstractions.Models.Season", "Season")
				.WithMany("Episodes")
				.HasForeignKey("SeasonID")
				.OnDelete(DeleteBehavior.Cascade)
				.HasConstraintName("fk_episodes_seasons_season_id");

				b.HasOne("Kyoo.Abstractions.Models.Show", "Show")
				.WithMany("Episodes")
				.HasForeignKey("ShowID")
				.OnDelete(DeleteBehavior.Cascade)
				.IsRequired()
				.HasConstraintName("fk_episodes_shows_show_id");

				b.Navigation("Season");

				b.Navigation("Show");
				});

			modelBuilder.Entity("Kyoo.Abstractions.Models.PeopleRole", b =>
				{
				b.HasOne("Kyoo.Abstractions.Models.People", "People")
				.WithMany("Roles")
				.HasForeignKey("PeopleID")
				.OnDelete(DeleteBehavior.Cascade)
				.IsRequired()
				.HasConstraintName("fk_people_roles_people_people_id");

				b.HasOne("Kyoo.Abstractions.Models.Show", "Show")
				.WithMany("People")
				.HasForeignKey("ShowID")
				.OnDelete(DeleteBehavior.Cascade)
				.IsRequired()
				.HasConstraintName("fk_people_roles_shows_show_id");

				b.Navigation("People");

				b.Navigation("Show");
				});

			modelBuilder.Entity("Kyoo.Abstractions.Models.Season", b =>
				{
				b.HasOne("Kyoo.Abstractions.Models.Show", "Show")
				.WithMany("Seasons")
				.HasForeignKey("ShowID")
				.OnDelete(DeleteBehavior.Cascade)
				.IsRequired()
				.HasConstraintName("fk_seasons_shows_show_id");

				b.Navigation("Show");
				});

			modelBuilder.Entity("Kyoo.Abstractions.Models.Show", b =>
				{
				b.HasOne("Kyoo.Abstractions.Models.Studio", "Studio")
				.WithMany("Shows")
				.HasForeignKey("StudioID")
				.OnDelete(DeleteBehavior.SetNull)
				.HasConstraintName("fk_shows_studios_studio_id");

				b.Navigation("Studio");
				});

			modelBuilder.Entity("Kyoo.Abstractions.Models.WatchedEpisode", b =>
				{
				b.HasOne("Kyoo.Abstractions.Models.Episode", "Episode")
				.WithMany()
				.HasForeignKey("EpisodeID")
				.OnDelete(DeleteBehavior.Cascade)
				.IsRequired()
				.HasConstraintName("fk_watched_episodes_episodes_episode_id");

				b.HasOne("Kyoo.Abstractions.Models.User", null)
				.WithMany("CurrentlyWatching")
				.HasForeignKey("UserID")
				.OnDelete(DeleteBehavior.Cascade)
				.IsRequired()
				.HasConstraintName("fk_watched_episodes_users_user_id");

				b.Navigation("Episode");
				});

			modelBuilder.Entity("ShowUser", b =>
				{
				b.HasOne("Kyoo.Abstractions.Models.User", null)
				.WithMany()
				.HasForeignKey("UsersID")
				.OnDelete(DeleteBehavior.Cascade)
				.IsRequired()
				.HasConstraintName("fk_link_user_show_users_users_id");

				b.HasOne("Kyoo.Abstractions.Models.Show", null)
				.WithMany()
				.HasForeignKey("WatchedID")
				.OnDelete(DeleteBehavior.Cascade)
				.IsRequired()
				.HasConstraintName("fk_link_user_show_shows_watched_id");
				});

			modelBuilder.Entity("collection_metadata_id", b =>
				{
				b.HasOne("Kyoo.Abstractions.Models.Provider", "Provider")
				.WithMany()
				.HasForeignKey("ProviderID")
				.OnDelete(DeleteBehavior.Cascade)
				.IsRequired()
				.HasConstraintName("fk_collection_metadata_id_providers_provider_id");

				b.HasOne("Kyoo.Abstractions.Models.Collection", null)
				.WithMany("ExternalIDs")
				.HasForeignKey("ResourceID")
				.OnDelete(DeleteBehavior.Cascade)
				.IsRequired()
				.HasConstraintName("fk_collection_metadata_id_collections_collection_id");

				b.Navigation("Provider");
				});

			modelBuilder.Entity("episode_metadata_id", b =>
				{
				b.HasOne("Kyoo.Abstractions.Models.Provider", "Provider")
				.WithMany()
				.HasForeignKey("ProviderID")
				.OnDelete(DeleteBehavior.Cascade)
				.IsRequired()
				.HasConstraintName("fk_episode_metadata_id_providers_provider_id");

				b.HasOne("Kyoo.Abstractions.Models.Episode", null)
				.WithMany("ExternalIDs")
				.HasForeignKey("ResourceID")
				.OnDelete(DeleteBehavior.Cascade)
				.IsRequired()
				.HasConstraintName("fk_episode_metadata_id_episodes_episode_id");

				b.Navigation("Provider");
				});

			modelBuilder.Entity("link_collection_show", b =>
				{
				b.HasOne("Kyoo.Abstractions.Models.Collection", null)
				.WithMany()
				.HasForeignKey("collection_id")
				.OnDelete(DeleteBehavior.Cascade)
				.IsRequired()
				.HasConstraintName("fk_link_collection_show_collections_collection_id");

				b.HasOne("Kyoo.Abstractions.Models.Show", null)
				.WithMany()
				.HasForeignKey("show_id")
				.OnDelete(DeleteBehavior.Cascade)
				.IsRequired()
				.HasConstraintName("fk_link_collection_show_shows_show_id");
				});

			modelBuilder.Entity("link_library_collection", b =>
				{
				b.HasOne("Kyoo.Abstractions.Models.Collection", null)
				.WithMany()
				.HasForeignKey("collection_id")
				.OnDelete(DeleteBehavior.Cascade)
				.IsRequired()
				.HasConstraintName("fk_link_library_collection_collections_collection_id");

				b.HasOne("Kyoo.Abstractions.Models.Library", null)
				.WithMany()
				.HasForeignKey("library_id")
				.OnDelete(DeleteBehavior.Cascade)
				.IsRequired()
				.HasConstraintName("fk_link_library_collection_libraries_library_id");
				});

			modelBuilder.Entity("link_library_provider", b =>
				{
				b.HasOne("Kyoo.Abstractions.Models.Library", null)
				.WithMany()
				.HasForeignKey("library_id")
				.OnDelete(DeleteBehavior.Cascade)
				.IsRequired()
				.HasConstraintName("fk_link_library_provider_libraries_library_id");

				b.HasOne("Kyoo.Abstractions.Models.Provider", null)
				.WithMany()
				.HasForeignKey("provider_id")
				.OnDelete(DeleteBehavior.Cascade)
				.IsRequired()
				.HasConstraintName("fk_link_library_provider_providers_provider_id");
				});

			modelBuilder.Entity("link_library_show", b =>
				{
				b.HasOne("Kyoo.Abstractions.Models.Library", null)
				.WithMany()
				.HasForeignKey("library_id")
				.OnDelete(DeleteBehavior.Cascade)
				.IsRequired()
				.HasConstraintName("fk_link_library_show_libraries_library_id");

				b.HasOne("Kyoo.Abstractions.Models.Show", null)
				.WithMany()
				.HasForeignKey("show_id")
				.OnDelete(DeleteBehavior.Cascade)
				.IsRequired()
				.HasConstraintName("fk_link_library_show_shows_show_id");
				});

			modelBuilder.Entity("link_show_genre", b =>
				{
				b.HasOne("Kyoo.Abstractions.Models.Genre", null)
				.WithMany()
				.HasForeignKey("genre_id")
				.OnDelete(DeleteBehavior.Cascade)
				.IsRequired()
				.HasConstraintName("fk_link_show_genre_genres_genre_id");

				b.HasOne("Kyoo.Abstractions.Models.Show", null)
				.WithMany()
				.HasForeignKey("show_id")
				.OnDelete(DeleteBehavior.Cascade)
				.IsRequired()
				.HasConstraintName("fk_link_show_genre_shows_show_id");
				});

			modelBuilder.Entity("people_metadata_id", b =>
				{
				b.HasOne("Kyoo.Abstractions.Models.Provider", "Provider")
				.WithMany()
				.HasForeignKey("ProviderID")
				.OnDelete(DeleteBehavior.Cascade)
				.IsRequired()
				.HasConstraintName("fk_people_metadata_id_providers_provider_id");

				b.HasOne("Kyoo.Abstractions.Models.People", null)
				.WithMany("ExternalIDs")
				.HasForeignKey("ResourceID")
				.OnDelete(DeleteBehavior.Cascade)
				.IsRequired()
				.HasConstraintName("fk_people_metadata_id_people_people_id");

				b.Navigation("Provider");
				});

			modelBuilder.Entity("season_metadata_id", b =>
				{
				b.HasOne("Kyoo.Abstractions.Models.Provider", "Provider")
				.WithMany()
				.HasForeignKey("ProviderID")
				.OnDelete(DeleteBehavior.Cascade)
				.IsRequired()
				.HasConstraintName("fk_season_metadata_id_providers_provider_id");

				b.HasOne("Kyoo.Abstractions.Models.Season", null)
				.WithMany("ExternalIDs")
				.HasForeignKey("ResourceID")
				.OnDelete(DeleteBehavior.Cascade)
				.IsRequired()
				.HasConstraintName("fk_season_metadata_id_seasons_season_id");

				b.Navigation("Provider");
				});

			modelBuilder.Entity("show_metadata_id", b =>
				{
				b.HasOne("Kyoo.Abstractions.Models.Provider", "Provider")
				.WithMany()
				.HasForeignKey("ProviderID")
				.OnDelete(DeleteBehavior.Cascade)
				.IsRequired()
				.HasConstraintName("fk_show_metadata_id_providers_provider_id");

				b.HasOne("Kyoo.Abstractions.Models.Show", null)
				.WithMany("ExternalIDs")
				.HasForeignKey("ResourceID")
				.OnDelete(DeleteBehavior.Cascade)
				.IsRequired()
				.HasConstraintName("fk_show_metadata_id_shows_show_id");

				b.Navigation("Provider");
				});

			modelBuilder.Entity("studio_metadata_id", b =>
				{
				b.HasOne("Kyoo.Abstractions.Models.Provider", "Provider")
				.WithMany()
				.HasForeignKey("ProviderID")
				.OnDelete(DeleteBehavior.Cascade)
				.IsRequired()
				.HasConstraintName("fk_studio_metadata_id_providers_provider_id");

				b.HasOne("Kyoo.Abstractions.Models.Studio", null)
				.WithMany("ExternalIDs")
				.HasForeignKey("ResourceID")
				.OnDelete(DeleteBehavior.Cascade)
				.IsRequired()
				.HasConstraintName("fk_studio_metadata_id_studios_studio_id");

				b.Navigation("Provider");
				});

			modelBuilder.Entity("Kyoo.Abstractions.Models.Collection", b =>
				{
				b.Navigation("ExternalIDs");
				});

			modelBuilder.Entity("Kyoo.Abstractions.Models.Episode", b =>
				{
				b.Navigation("ExternalIDs");
				});

			modelBuilder.Entity("Kyoo.Abstractions.Models.People", b =>
				{
				b.Navigation("ExternalIDs");

				b.Navigation("Roles");
				});

			modelBuilder.Entity("Kyoo.Abstractions.Models.Season", b =>
				{
				b.Navigation("Episodes");

				b.Navigation("ExternalIDs");
				});

			modelBuilder.Entity("Kyoo.Abstractions.Models.Show", b =>
				{
				b.Navigation("Episodes");

				b.Navigation("ExternalIDs");

				b.Navigation("People");

				b.Navigation("Seasons");
				});

			modelBuilder.Entity("Kyoo.Abstractions.Models.Studio", b =>
				{
				b.Navigation("ExternalIDs");

				b.Navigation("Shows");
				});

			modelBuilder.Entity("Kyoo.Abstractions.Models.User", b =>
				{
				b.Navigation("CurrentlyWatching");
				});
#pragma warning restore 612, 618
		}
	}
}
