x-transcoder: &transcoder-base
  build: ./transcoder
  networks:
    default:
      aliases:
        - transcoder
  restart: on-failure
  env_file:
    - ./.env
  volumes:
    - ${LIBRARY_ROOT}:/video:ro
    - ${CACHE_ROOT}:/cache
    - metadata:/metadata

services:
  back:
    build: ./back
    restart: on-failure
    env_file:
      - ./.env
    depends_on:
      postgres:
        condition: service_healthy
      meilisearch:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    volumes:
      - kyoo:/kyoo

  migrations:
    build:
      context: ./back
      dockerfile: Dockerfile.migrations
    restart: "no"
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - ./.env

  front:
    build: ./front
    restart: on-failure
    environment:
      - KYOO_URL=${KYOO_URL:-http://back:5000}

  scanner:
    build: ./scanner
    restart: on-failure
    depends_on:
      back:
        condition: service_healthy
    env_file:
      - ./.env
    environment:
      - KYOO_URL=${KYOO_URL:-http://back:5000}
    volumes:
      - ${LIBRARY_ROOT}:/video:ro

  autosync:
    build: ./autosync
    restart: on-failure
    depends_on:
      rabbitmq:
        condition: service_healthy
    env_file:
      - ./.env

  transcoder:
    <<: *transcoder-base
    profiles: ['', 'cpu']

  transcoder-nvidia:
    <<: *transcoder-base
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: [gpu]
    environment:
      - GOCODER_HWACCEL=nvidia
    profiles: ['nvidia']

  transcoder-vaapi:
    <<: *transcoder-base
    devices:
      - /dev/dri:/dev/dri
    environment:
      - GOCODER_HWACCEL=vaapi
      - GOCODER_VAAPI_RENDERER=${GOCODER_VAAPI_RENDERER:-/dev/dri/renderD128}
    profiles: ['vaapi']
  # qsv is the same setup as vaapi but with the hwaccel env var different
  transcoder-qsv:
    <<: *transcoder-base
    devices:
      - /dev/dri:/dev/dri
    environment:
      - GOCODER_HWACCEL=qsv
      - GOCODER_VAAPI_RENDERER=${GOCODER_VAAPI_RENDERER:-/dev/dri/renderD128}
    profiles: ['qsv']

  ingress:
    image: nginx@sha256:6db391d1c0cfb30588ba0bf72ea999404f2764febf0f1f196acd5867ac7efa7e
    restart: on-failure
    environment:
      - PORT=8901
      - FRONT_URL=http://front:8901
      - BACK_URL=${KYOO_URL:-http://back:5000}
    volumes:
      - ./nginx.conf.template:/etc/nginx/templates/kyoo.conf.template:ro
    depends_on:
      - back
      - front
    ports:
      - "8901:8901"

  postgres:
    image: postgres:15@sha256:ea40a028dd42740d6cff34135ff6b3119ff7ce0ed60120d992216456b5987fe7
    restart: on-failure
    env_file:
      - ./.env
    volumes:
      - db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  meilisearch:
    image: getmeili/meilisearch:v1.4@sha256:7d3478f908c69c3d4fc46d4fce54cd88cca21167705e4144b70089ece3008198
    restart: on-failure
    volumes:
      - search:/meili_data
    environment:
      - MEILI_ENV=production
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--spider", "http://meilisearch:7700/health"]
      interval: 30s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-alpine@sha256:cd1b0e16575fd9885a03f2ae3b7d0fb4ee77b215a1127cf086397f7a55e8912b
    restart: on-failure
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    ports:
      - 5672:5672
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

volumes:
  kyoo:
  db:
  metadata:
  search:
